print(i)
}
x <- c("a","b","c","d")
for(i in 1:4) {
print (x[i])
}
for(i in seq_along(x)){
print(x[i])
}
for(i in 1:4) print (x[i])
for(letter in x) {
print(letter)
}
swirl()
10
25
4
summary(cars$price)
y <- 100
cars$type
sqrt(y)
z <- sqrt(y)
?sqrt
cars
10
range(cars$price)
sum(cars$price)
sum(cars$price)/54
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted <- sort(mpg.midsize)
19
median(mpg.midsize)
summary(cars$mpgCity)
25
19
20
sd(mpg.midsize)
sd(mpg.midsize)^2
24
mtcars
allMPG <- mtcars$mpg
allMPG
mean(allMPG)
sampMeanMPG <- mean(allMPG)
sampVarMPG <- var(allMPG)
length(allMPG)
n <- length(allMPG)
tStat <- (sampMeanMPG - 12.0)/sqrt(sampVarMPG/n)
myDF <- n-1
tStat
myDF
pVal1 <- pt(tStat, df = myDF, lower.tail=FALSE)
pVal <- pVal1 * 2
pVal
t.test(allMPG, mu=12.0, alternative="two.sided")
mtcars$am
auto <- mtcars[mtcars$am==0,]
man <- mtcars[mtcars$==1,]
man <- mtcars[mtcars$am==1,]
autoMPG <- auto$mpg
manMPG <- man$mpg
sampMeanAutoMPG <- mean(autoMPG)
sampMeanManMPG <- mean(manMPG)
diffSampMean <- sampMeanAutoMPG - sampMeanManMPG
diffSampMean <- sampMeanManMPG - sampMeanAutoMPG
diffPopMean <- 0
sampVarAutoMPG <- var(autoMPG)
sampVarManMPG <- var(manMPG)
nAuto <- length(autoMPG)
nMan <- length(manMPG)
numer <- diffSampMean - 0
denom <- sqrt(sampVarManMPG/nMan + sampVarAutoMPG/nAuto)
tStat <- numer/denom
myDF <- (sampVarManMPG/nMan + sampVarAutoMPG/nAuto)^2 / ((sampVarManMPG/nMan)^2/(nMan - 1) + (sampVarAutoMPG/nAuto)^2/(nAuto-1))
tStat
myDF
pVal1 <- pt(tStat)
?pt
pVal1 <- pt(tStat, df = myDF, lower.tail = FALSE)
pVal <- pVal1*2
pVal
?t.test
t.test(autoMPG, manMPG, alternative = "two.sided")
count <- 0
while (count < 10) {
print(count)
count <- count + 1
}
z <- 5
while(z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) { ##random walk
z <- z + 1
} else {
z <- z - 1
}
}
x0 <- 1
tol <- 1e-8
repeat {
x1 <- computeEstimate()
if(abs(x) - x0) < tol) {
break
} else {
x0 <- x1
}
}
library(swirl)
swirl()
bye()
add2(3,4)
add2 <- function(x, y) {
x + y
}
add2(3,5)
above10 <- function(x) {
use <- x > 10
x[use]
}
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above10(x)
above(x,5)
above <- function(x, n=10) {
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
}
mtcars
columnmean(mtcars)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(mtcars)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(mtcars)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(mtcars)
args(columnmean)
matrix(1:15,nrow=3)
??inverse
load("MASS")
load("MASS")
load("http://www.stats.ox.ac.uk/pub/MASS4/")
?Load
?load
library("MASS")
ginv(matrix(1:15,nrow=3))
makeCacheMatrix <- function(x=numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(ginv) m <<- ginv
getinv <- function() m
list(set = set, get = get,
setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- ginv(data, ...)
x$setinv(m)
m
}
mymatrix <- matrix(1:20, nrow=4)
mymatrix
cacheSolve(mymatrix)
makeCacheMatrix(mymatrix)
cacheSolve(mymatrix)
class(mymatrix)
inverse(mymatrix)
load("Matrix")
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv, getinv = getinv)
}
makeCacheMatrix(mymatrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached inverse")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
x <- matrix(1:4,nrow=2)
x
m <- makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
library(manipulate)
library(xlsx)
myHist <- function(mu){}
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
install.packages("UsingR")
library("UsingR")
library(UsingR)
library("MASS")
library(UsingR)
library("UsingR")
hist(x,col="blue",breaks=100)
hist(x,col="blue")
hist(x,col="blue", breaks = 0)
hist(x,col="blue", breaks = 5)
hist(x,col="blue", breaks = 1)
x
dox <- rbind(x,w)
dox
hist(dox)
plot(dox)
beta1 <- cor(w,x)*sd(w)/sd(x)
beta0 <- mean(w)-beta1*mean(x)
rbind(c(beta0,beta1), coef(lm(w~x)))
beta1 <- cor(x,w)*sd(x)/sd(w)
beta0 <- mean(x)-beta1*mean(w)
rbind(c(beta0,beta1), coef(lm(x~w)))
sum(w*x)/sum(x)
sum(w*x)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x
y
beta1 <- cor(x,y)*sd(x)/sd(y)
beta0 <- mean(x)-beta1*mean(y)
rbind(c(beta0,beta1), coef(lm(x~y)))
beta1 <- cor(y,x)*sd(y)/sd(x)
> beta0 <- mean(y)-beta1*mean(x)
> rbind(c(beta0,beta1), coef(lm(y~x)))
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
rbind(c(beta0,beta1), coef(lm(y~x)))
data(mtcars)
print(mtcars)
beta1 <- cor(mtcars$mpg,mtcars$wt)*sd(mtcars$mpg)/sd(mtcars$wt)
beta0 <- mean(mtcars$mpg)-beta1*mean(mtcars$wt)
rbind(c(beta0,beta1), coef(lm(mtcars$mpg~mtcars$wt)))
.5*2
b1<-.5*2
cor(.5/2)
.5*(2/1)
.5(1/2)
.5*(1/2)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
?scale
scale(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
rbind(c(beta0,beta1), coef(lm(y~x)))
scale(x)
beta1 <- cor(x,y)*sd(x)/sd(y)
beta0 <- mean(x)-beta1*mean(y)
rbind(c(beta0,beta1), coef(lm(x~y)))
Cor(y,x)
cor(y,x)
-1.71/-.04
var(y)/var(x)
2*sd(y)/sd(x)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
rbind(c(beta0,beta1), coef(lm(y~x)))
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, sttenu$dist)
cov(efit$residuals, attenu$dist)
d <- c(1:10, 30:40, 5, 7, 9, 12)
median(d)
sum(d)
d <- c(31:50)
d
d<-31:50
d
library("sweSCB")
insall.packages("sweSCB")
install.packages("sweSCB")
library("sweSCB")
f<-1:3
f
2.3 -> f[3]
f
f<-1:3
f
f<-rep(2.3,3)
f
f<-1:3
f[3]<-2.3
f
5:15
rep(5:15,5)
seq(5,15,1)
sample(letters,5,replace=T)
sample(letters,5,replace=F)
c(5,letters)
sample(LETTERS,5,replace=F)
a <- sample(letters[1:4],100,replace=T)
a
a <- sample(letters[1:4],100,replace=F)
pie(a)
a <- sample(letters[1:4],100,replace=T)
pie(a)
pie(table(a))
table(a)
length <- norm(10,180,10)
length <- rnorm(10,180,10)
weight <- (length/100)^2*25
measurements <- data.frame(cbind(length,weight))
measurements
round(measurements,4)
round(measurements)
round(measurements$length)
str(measurements)
a<-round(measurements,4)
a
b<-round(measurements)
b
m2 <- measurements
m2
m2$length <- round(measurements$length)
m2
me$length
m2$length
str(m2)
x <- 0:2 ;
plot(x, dbinom(x,2,0.7 ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
x <- 4
class (x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[2]]
library(datasets)
data(iris)
apply(iris[,1:4],2,mean)
iris
mean(which(iris$Species = virginica))
mean(which(iris$Species = "virginica))
mean(iris[which(iris$Species == "virginica"),])
mean(iris[which(iris$Species == "virginica"),]$Sepal.Length)
mean(iris[iris$Species == "virginica","Sepal.Length"])
Colmean(iris)
colMeans(iris)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
hp <- sapply(split(mtcars$hp, mtcars$cyl), mean))
hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hp
hp[3] - hp[1]
install.packages("installr")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
class(xyplot(weight ~ Time | Diet, BodyWeight))
library(datasets)
data(airquality)
load(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("mgcv")
install.packages("mgcv")
DF <- data.frame()
DF$Names <- c("Amina","Ben","Charlene","Diala","Ethan")
nrow(DF) <- 5
nrow(DF)
nrow(DF) <- 5
?data.frame
names <- c("Arlene","Ben","Charlene","Dan","Ethan")
scores <- c(90,80,70,60,50)
DF <- cbind(names,scores)
head(DF)
class(DF)
DF <- data.frame(DF)
class(DF)
head(DF)
str(DF)
DF$names <- as.character(DF$names)
DF$scores <- as.numeric(DF$scores)
DF
str(DF)
pmatch("Eth",DF)
pmatch("Eth",DF$names)
pmatch("lene",DF$names)
pmatch("Cha",DF$names)
pmatch("Ben",DF$names)
pmatch("ben",DF$names)
pmatch("arl",DF$names)
charmatch("arl",DF$names)
charmatch("Arl",DF$names)
charmatch("lene",DF$names)
match("Arl",DF$names)
match("Arlene",DF$names)
grep("Arlene",DF$names)
grep("Arl",DF$names)
grep("lene",DF$names)
grep("e",DF$names)
substr(DF[1,1],start=1,stop=3)
grep("Clene",DF$names)
grep("Ch"&"lene",DF$names)
setwd("~/OneDrive/MOOCs/Data Science Track/datasciencecoursera/getdata_peerassessment")
library(dplyr)
library(tidyr)
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileurl, destfile = "getdatazip", method="curl")
unzip(getdatazip)
unzip(getdatazip.zip)
unzip("getdatazip.zip")
list.files()
list.files(/"UCI HAR Dataset")
list.fils(fullnames=TRUE)
list.files(fullnames=TRUE)
list.files(full=TRUE)
list.files("./UCI HAR Dataset")
file.exists("./UCI HAR Dataset")
file.exists("./UCI HAR Dataset/test")
file.exists("./UCI HAR Dataset/train")
list.files("./UCI HAR Dataset/train")
list.files("./UCI HAR Dataset/", full=TRUE)
